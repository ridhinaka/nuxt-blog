/*!
  * vue-use-sound v1.1.1
  * (c) 2021 YaÃ«l GUILLOUX
  * @license MIT
  */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vueDemi = require('vue-demi');

function useSound(url, { volume = 1, playbackRate = 1, soundEnabled = true, interrupt = false, onload, ...delegated } = {}) {
    const HowlConstructor = vueDemi.ref(null);
    const isPlaying = vueDemi.ref(false);
    let duration = vueDemi.ref(null);
    let sound = vueDemi.ref(null);
    vueDemi.onMounted(() => {
        Promise.resolve().then(function () { return require('./howler-1e367fbf.js'); }).then(function (n) { return n.howler; }).then((mod) => {
            HowlConstructor.value = mod.Howl;
            sound.value = new HowlConstructor.value({
                src: [url],
                volume: vueDemi.unref(volume),
                rate: vueDemi.unref(playbackRate),
                onload: handleLoad,
                ...delegated,
            });
        });
    });
    const handleLoad = function () {
        if (typeof onload === 'function') {
            // @ts-ignore
            onload.call(this);
        }
        // @ts-ignore
        duration = duration * 1000;
    };
    vueDemi.watch(() => [url], () => {
        if (HowlConstructor && HowlConstructor.value && sound && sound.value) {
            sound.value = new HowlConstructor.value({
                src: [url],
                volume: vueDemi.unref(volume),
                rate: vueDemi.unref(playbackRate),
                onload: handleLoad,
                ...delegated,
            });
        }
    });
    vueDemi.watch(() => [vueDemi.unref(volume), vueDemi.unref(playbackRate)], () => {
        if (sound.value) {
            sound.value.volume(vueDemi.unref(volume));
            sound.value.rate(vueDemi.unref(playbackRate));
        }
    });
    const play = (options) => {
        if (typeof options === 'undefined') {
            options = {};
        }
        if (!sound.value || (!soundEnabled && !options.forceSoundEnabled)) {
            return;
        }
        if (interrupt) {
            sound.value.stop();
        }
        if (options.playbackRate) {
            sound.value.rate(options.playbackRate);
        }
        sound.value.play(options.id);
        sound.value.once('end', () => {
            if (sound && sound.value && !sound.value.playing()) {
                isPlaying.value = false;
            }
        });
        isPlaying.value = true;
    };
    const stop = (id) => {
        if (!sound.value) {
            return;
        }
        sound.value.stop(typeof id === 'number' ? id : undefined);
        isPlaying.value = false;
    };
    const pause = (id) => {
        if (!sound.value) {
            return;
        }
        sound.value.pause(typeof id === 'number' ? id : undefined);
        isPlaying.value = false;
    };
    const returnedValue = [
        play,
        {
            sound,
            isPlaying,
            duration,
            pause,
            stop,
        },
    ];
    return returnedValue;
}

exports.default = useSound;
